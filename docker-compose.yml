version: '3.8'

services:
  dev:          # konfigūruojame konteinerį pavadinimu web
    # build komanda nudorome, kad iš kuriame kataloge (šiuo atveju iš esančio katalogo, .) esančio Dockerfile statyti konteinerį
    build: .
    # paveiksliuko (docker image) pavadinimas
    image: portfolio:dev
    # konteinerio pavadinimas
    container_name: portfolio.dev
    # parametras tty nurodo, ar konteineris gali naudotis linux subsistemos serijinės sąsajos TeleTYpewriter savybėmis, kurių iš esmės reikia komandinei eilutei funkcionuoti. Tuo pačiu atidarom ir stdin - komandinės eilutės įvedimo funkciją, kurią gali tekti prireikti naudoti pvz. su python input() funkcija.
    tty: true
    stdin_open: true
    # restart komanda nurodo sąlygas, kada perkrauti konteinerį jam išsijungus. Produkcinėje aplinkoje tai turėtų būti always. 
    restart: always
    # tinklo konfigūracija
    ports:
      - 8001:8001
    # volumes - disko sąsaja, kur konteineris sinchronizuos savo failus su realiais diske esančiais failais. Šių failų nereikės kopijuoti su cp. Taip pat panašiai sinchronizuosime ir `static` bei `media` katalogus su nginx konteineriu.
    volumes:
      - ./portfolio:/app
      - ./portfolio/db.sqlite3:/app/portfolio/db.sqlite3
    # vykdome komandas startuojant konteineriui, o ne konstruojant to konteinerio paveiksliuką (image). Rekomenduojame šias komandas iš Dockerfile pašalinti arba užkomentuoti.
    command: >
      bash -c "python manage.py migrate &&
               python manage.py collectstatic --noinput &&
               gunicorn portfolio.wsgi --bind 0.0.0.0:8001"

  nginx:           # Nginx konteineris
    # surenkame nginx konteinerį su mūsų projekto .conf
    build: ./nginx/
    # savo surinkto nginx image paveiksliuko pavadinimas ir tagas
    image: nginx:porftolio
    # konteinerio pavadinimas
    container_name: portfolio.nginx
    # jeigu konteineris pakibtų, jį visada perkrausime
    restart: always
    # kokius portus atidaryti - jeigu reikia, įtraukite ir SSL
    ports:
      - 80:80
      # - 443:443
    # nurodome tinklo sąsają su pagrindiniu projekto konteineriu `dev`.
    links:
      - dev:portfolio
    # sinchronizuojame failus tarp konteinerio ir projekto `static` ir `media` katalogų. Šiuo atveju, netgi padarius `python manage.py collectstatic` iš projekto `dev` konteinerio, `nginx` konteineryje atitinkami failai taip pat atsinaujins.
    volumes:
      - ./portfolio/media_root:/app/media
      - ./portfolio/static_root:/app/static
      # - /etc/letsencrypt:/etc/letsencrypt
      # - /var/www/certbot:/var/www/certbot
  # certbot:
  #   image: certbot/certbot
  #   volumes:
  #     - /etc/letsencrypt:/etc/letsencrypt
  #     - /var/www/certbot:/var/www/certbot
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  #   depends_on:
  #     - nginx